# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

pool:
  vmImage: ubuntu-latest
strategy:
  matrix:
    # Python27:
    #   python.version: '2.7'
    # Python35:
    #   python.version: '3.5'
    # Python36:
    #   python.version: '3.6'
     Python37:
      python.version: '3.7'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
    pip install google.cloud.bigquery
  displayName: 'Install dependencies'

- script: |
    pip install pytest pytest-azurepipelines
    pytest
  displayName: 'pytest'

#- script: python example.py

- task: PythonScript@0
  inputs:
    scriptSource: 'inline'
    script: |
      from google.oauth2 import service_account
      from google.cloud import bigquery
      credentials = service_account.Credentials.from_service_account_file('cpfit-innovation.json')
      project_id = 'cpfit-innovation'
      client = bigquery.Client(credentials=credentials,project=project_id)
      def update_view(override_values={}):
       view_id = "cpfit-innovation.TEST_Onedrive.Yacht"
       view_id = override_values.get("view_id", view_id)
       view = bigquery.Table(view_id)
       view.view_query = f"SELECT UserID,ReportName FROM `cpfit-innovation.TEST_Onedrive.TestLimit`
                           GROUP BY UserID,ReportName"
       view = client.update_table(view, ["view_query"])
       print(f"Updated {view.table_type}: {str(view.reference)}")
       return view
      update_view(override_values={})
  displayName: 'update view'
- task: PythonScript@0
  inputs:
    scriptSource: 'inline'
    script: |  
      from google.oauth2 import service_account
      from google.cloud import bigquery
      credentials = service_account.Credentials.from_service_account_file('cpfit-innovation.json')
      project_id = 'cpfit-innovation'
      client = bigquery.Client(credentials=credentials,project=project_id)
      def create_view(override_values={}):
       view_id = "cpfit-innovation.TEST_Onedrive.Yacht3"
       view_id = override_values.get("view_id", view_id)
       view = bigquery.Table(view_id)
       view.view_query = f"SELECT 'AxonPowerDay'"
       view = client.create_table(view)
       print(f"Created {view.table_type}: {str(view.reference)}")
       return view
      create_view(override_values={})
  displayName: 'create view'
    
- task: PythonScript@0
  inputs:
    scriptSource: 'inline'
    script: |  
      from google.oauth2 import service_account
      from google.cloud import bigquery
      credentials = service_account.Credentials.from_service_account_file('cpfit-innovation.json')
      project_id = 'cpfit-innovation'
      client = bigquery.Client(credentials=credentials,project=project_id)
      def delete_view(override_values={}):
       view_id = "cpfit-innovation.TEST_Onedrive.Yacht2"
       client.delete_table(view_id, not_found_ok=True)
       #print(f"Deleted {view_id.table_type}: {str(view_id.reference)}")
      delete_view(override_values={})
  displayName: 'delete view'